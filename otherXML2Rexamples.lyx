#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Building scrapers with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{XML2R}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{scrape}
\end_layout

\end_inset

 borrows ideas and utilities from the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{XML2R}
\end_layout

\end_inset

 package.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{XML2R}
\end_layout

\end_inset

 reduces the amount of coding and cognitive effort required to extract and
 manipulate XML content.
 It was designed specifically for XML content with a relational structure
 in mind.
 That does not imply the XML content has to be relational in order for 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{XML2R}
\end_layout

\end_inset

 to be useful, but the package conventions are better suited for that case.
 The next two sections demonstrates how to exploit the ideas of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{XML2R}
\end_layout

\end_inset

 in order to quickly build XML scrapers.
\end_layout

\begin_layout Subsection
Scraping other Gameday files
\end_layout

\begin_layout Standard
This section will demonstrate how to use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{XML2R}
\end_layout

\end_inset

 to collect data from 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{http://gd2.mlb.com/components/game/mlb/year_2011/month_06/day_12/gid_2011_06_
12_texmlb_minmlb_1/bench.xml}{bench.xml}
\end_layout

\end_inset

 files on the Gameday website.
 First, note that bench.xml files are located on a particular game's homepage.
 The urls that point to every game's homepage restricted to a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{start}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{end}
\end_layout

\end_inset

 date can be created via 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{makeUrls}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<makeUrls, cache=TRUE>>=
\end_layout

\begin_layout Plain Layout

urls <- makeUrls(start="2011-06-01", end="2011-06-01") 
\end_layout

\begin_layout Plain Layout

bench.files <- paste0(urls, "/bench.xml")
\end_layout

\begin_layout Plain Layout

sub("http://gd2.mlb.com/components/game/mlb/", "", head(bench.files))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
From here, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{XML2Obs}
\end_layout

\end_inset

 can parse the content of each file and return a list of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
dfn{observations}
\end_layout

\end_inset

.
 Each observation is technically a character matrix with one row.
 One observation will contain every XML attribute and value for a particular
 XML lineage.
 Observation names track the XML lineage so that observations can be grouped
 together in a sensible fashion at a later point.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<scrape-bench>>=
\end_layout

\begin_layout Plain Layout

library(XML2R)
\end_layout

\begin_layout Plain Layout

obs <- XML2Obs(bench.files, as.equiv=TRUE, url.map=TRUE, quiet=TRUE) 
\end_layout

\begin_layout Plain Layout

unique(names(obs))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this example, there are currently six different levels of observations,
 since the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{url
\backslash
_map}
\end_layout

\end_inset

 element is not an observation.
 Its purpose is to simply map shortened url identifiers to the true file
 name.
 This is useful if the user wants to avoid repeating long file names in
 the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{url
\backslash
_key}
\end_layout

\end_inset

 column.
 Note there would have been many more unique observation names had 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{as.equiv=FALSE}
\end_layout

\end_inset

, since in that case, the shortened url prefix is prepended to observation
 names.
 This helps differentiate between observations that have the same XML lineage,
 but were obtained from different files.
 This is simply a convenience feature and can lead to redundancy as a url
 column is added to each observation.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<head>>=
\end_layout

\begin_layout Plain Layout

head(obs)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that it would be cumbersome to store observations from the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{"bench//away//pitchers//pitcher"}
\end_layout

\end_inset

 level in a separate table from the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{"bench//home//pitchers//pitcher"}
\end_layout

\end_inset

 (and same for the batter case).
 This is where the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{re
\backslash
_name}
\end_layout

\end_inset

 function becomes useful:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<re_name, message=FALSE>>=
\end_layout

\begin_layout Plain Layout

equiv1 <- c("bench//away//batters//batter", "bench//home//batters//batter")
\end_layout

\begin_layout Plain Layout

equiv2 <- c("bench//away//pitchers//pitcher", "bench//home//pitchers//pitcher")
\end_layout

\begin_layout Plain Layout

tmp <- re_name(obs, equiv=equiv1, diff.name="location")
\end_layout

\begin_layout Plain Layout

obs2 <- re_name(tmp, equiv=equiv2, diff.name="location")
\end_layout

\begin_layout Plain Layout

unique(names(obs2))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{re
\backslash
_name}
\end_layout

\end_inset

 function automatically determines the difference in the names supplied
 to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{equiv}
\end_layout

\end_inset

 and suppresses any difference in the new name.
 This information is not lost; however, as this value is appended as an
 additional column (location) for each observation:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<couple-obs>>=
\end_layout

\begin_layout Plain Layout

obs2[c(1, 20)]
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Simply because of the structure of this XML file, we can use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{re
\backslash
_name}
\end_layout

\end_inset

 again to generate a key (the column named 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{location}
\end_layout

\end_inset

) that allows us to merge information on the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{"bench"}
\end_layout

\end_inset

 level with the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{"bench//batters//batter"}
\end_layout

\end_inset

 and/or the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{"bench//pitchers//pitcher"}
\end_layout

\end_inset

 level.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<re_name2, message=FALSE>>=
\end_layout

\begin_layout Plain Layout

obs3 <- re_name(obs2, equiv=c("bench//away", "bench//home"), diff.name="location"
)
\end_layout

\begin_layout Plain Layout

unique(names(obs3))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In most cases, one will not be able to generate a key between tables by
 simply renaming observations.
 Instead, one will often want to use the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{add
\backslash
_key}
\end_layout

\end_inset

 function to generate keys between tables.
 The next section has a similar example but uses 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{add
\backslash
_key}
\end_layout

\end_inset

.
 In this example, the list of observations are now in position to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{collapse}
\end_layout

\end_inset

 into a list of matrices.
 Those tables can then be merged to obtain the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{pitcher}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{batter}
\end_layout

\end_inset

 data frames.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mer>>=
\end_layout

\begin_layout Plain Layout

dat <- collapse(obs3) 
\end_layout

\begin_layout Plain Layout

batter <- merge(x=dat$'bench//batters//batter', y=dat$`bench`, 
\end_layout

\begin_layout Plain Layout

		by=c("url_key", "location")) 
\end_layout

\begin_layout Plain Layout

head(batter)
\end_layout

\begin_layout Plain Layout

pitcher <- merge(x=dat$'bench//pitchers//pitcher', y=dat$`bench`, 
\end_layout

\begin_layout Plain Layout

		by=c("url_key", "location")) 
\end_layout

\begin_layout Plain Layout

head(pitcher)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Scraping NBA/WNBA data
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{XML2R}
\end_layout

\end_inset

 can also be used to obtain non-Gameday data.
 Consider XML data used to populate statistics on 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://www.nba.com/stats/}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://www.wnba.com/statistics/}
\end_layout

\end_inset

.
 A bit of work is required to find and obtain files that inform these web
 pages, but below is an example of two such files 
\begin_inset CommandInset citation
LatexCommand citealp
key "hack"

\end_inset

.
 A higher-level API to these and other complementary files is available
 from the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{bbscrapeR}
\end_layout

\end_inset

 package available here 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{https://github.com/cpsievert/bbscrapeR}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<wnba-urls>>=
\end_layout

\begin_layout Plain Layout

urlz <- c("http://www.wnba.com/games/game_component/dynamic/20130527/CHIPHO/boxsco
re.xml", 
\end_layout

\begin_layout Plain Layout

	"http://www.nba.com/games/game_component/dynamic/20130528/MIAIND/boxscore.xml")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As before, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{XML2Obs}
\end_layout

\end_inset

 can be used to obtain the list of observations.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<XML2Obs-wnba>>=
\end_layout

\begin_layout Plain Layout

obz <- XML2Obs(urlz, as.equiv=TRUE, url.map=TRUE, quiet=TRUE)
\end_layout

\begin_layout Plain Layout

table(names(obz))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As it turns out, there is only one observation per file among the 
following levels: 
\lang english

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{"message"}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{"message//game"}
\end_layout

\end_inset

, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{"message//game//officials"}
\end_layout

\end_inset

.
 For this reason, the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{url
\backslash
_key}
\end_layout

\end_inset

 can be used to connect those observations to each other as well as their
 descendants.
 Observations from the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{"message//game//htm"}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{"message//game//vtm"}
\end_layout

\end_inset

 levels will eventually be renamed so they are put into the same table.
 Before that, we need to generate a key so that these observations can be
 mapped back to their descendents.
 The 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{recycle}
\end_layout

\end_inset

 argument for the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{add
\backslash
_key}
\end_layout

\end_inset

 function is useful in this context as it will repeat the value for the
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{"tcd"}
\end_layout

\end_inset

 variable sensibly for each descendent of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{parent}
\end_layout

\end_inset

 argument.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<add_key-damnit>>=
\end_layout

\begin_layout Plain Layout

tmp <- add_key(obz, parent="message//game//htm", recycle="tcd") 
\end_layout

\begin_layout Plain Layout

obzwkey <- add_key(tmp, parent="message//game//vtm", recycle="tcd")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next, the observations are renamed to reduce the number of tables.
 After collapsing the observations, the table with data on the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{"teams"}
\end_layout

\end_inset

 level is merged with data on the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{"players"}
\end_layout

\end_inset

 level.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<reduce>>=
\end_layout

\begin_layout Plain Layout

tmp <- re_name(obzwkey, equiv = c("message//game//htm", "message//game//vtm"),
                
\end_layout

\begin_layout Plain Layout

	rename.as = "teams", diff.name="home_away") 
\end_layout

\begin_layout Plain Layout

obz2 <- re_name(tmp, equiv = c("message//game//htm//pl", "message//game//vtm//pl
"),                 
\end_layout

\begin_layout Plain Layout

	rename.as = "players", diff.name="home_away")
\end_layout

\begin_layout Plain Layout

tablez <- collapse(obz2) 
\end_layout

\begin_layout Plain Layout

boxscore <- merge(x=tablez[["players"]], y=tablez[["teams"]],          
          
\end_layout

\begin_layout Plain Layout

	by=c("url_key", "tcd", "home_away")) 
\end_layout

\begin_layout Plain Layout

boxscore[c(1, 28), 1:5]
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Revealing the hood on 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{scrape}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At least for simple files such as inning_hit.xml, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{scrape}
\end_layout

\end_inset

 is essentially a simple wrapper around functions from the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{XML2R}
\end_layout

\end_inset

 package.
 To demonstrate, this section will expose how 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{scrape}
\end_layout

\end_inset

 manipulates these files.
 First, the urls that point to every game's homepage restricted to a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{start}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{end}
\end_layout

\end_inset

 date can be created via
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{pitchRx::makeUrls}
\end_layout

\end_inset

 which is a convenience for constructing urls specific to the Gameday website.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<makeUrls2, cache=TRUE>>=
\end_layout

\begin_layout Plain Layout

urls <- makeUrls(start="2011-06-01", end="2011-06-01") 
\end_layout

\begin_layout Plain Layout

sub("http://gd2.mlb.com/components/game/mlb/", "", head(urls))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To get the full file name for each game, 
\begin_inset Quotes eld
\end_inset

/inning/inning_hit.xml
\begin_inset Quotes erd
\end_inset

 is appended to the homepage url.
 From here, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{XML2R::XML2Obs}
\end_layout

\end_inset

 can parse every file and return a list of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
dfn{observations}
\end_layout

\end_inset

.
 Each observation is technically a character matrix with one row.
 The names of the observations track where in the XML lineage the data is
 located.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<scrape-hits>>=
\end_layout

\begin_layout Plain Layout

library(XML2R)
\end_layout

\begin_layout Plain Layout

hit.urls <- paste0(urls, "/inning/inning_hit.xml")
\end_layout

\begin_layout Plain Layout

obs <- XML2Obs(hit.urls, as.equiv=TRUE, url.map=TRUE, quiet=TRUE) 
\end_layout

\begin_layout Plain Layout

unique(names(obs))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{url.map=TRUE}
\end_layout

\end_inset

, the last element of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{obs}
\end_layout

\end_inset

 is not actually an observation, but a matrix with two columns that maps
 each file name to a shortened name.
 This can help avoid repeating really long file names and wasting memory.
 If 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{as.equiv=FALSE}
\end_layout

\end_inset

, this shortened name is added as a prefix to the observation names.
 For example, the observations shown below would be named 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{'url1//hitchart//hip'}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{'url2//hitchart//hip'}
\end_layout

\end_inset

, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{'url3//hitchart//hip'}
\end_layout

\end_inset

 had 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{as.equiv=FALSE}
\end_layout

\end_inset

.
 By setting the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{as.equiv}
\end_layout

\end_inset

 option equal to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{TRUE}
\end_layout

\end_inset

, we ensure that observations from different files but the same XML lineage
 have the same name.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<obs>>=
\end_layout

\begin_layout Plain Layout

obs[c(1, 100, 200)]
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A quick glance at a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{http://gd2.mlb.com/components/game/mlb/year_2011/month_06/day_01/gid_2011_06_
01_anamlb_kcamlb_1/inning/}{inning
\backslash
_hit.xml}
\end_layout

\end_inset

 file will provide insight as to why all observations are named 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{'hitchart//hip'}
\end_layout

\end_inset

.
 The names of observations become very important once observations are 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{collapse}
\end_layout

\end_inset

d into tables.
 Since there is one unique name among all observations, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{collapse}
\end_layout

\end_inset

 will return one table with all the observations.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<collapse>>=
\end_layout

\begin_layout Plain Layout

hip <- collapse(obs)
\end_layout

\begin_layout Plain Layout

head(hip)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At this point, the full names can be recovered via:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<merge>>=
\end_layout

\begin_layout Plain Layout

hip <- merge(x=hip, y=obs[["url_map"]])
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_body
\end_document
